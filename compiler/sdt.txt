(00) S->program id { variable_declaration stmts }
(01) stmts->stmts M stmt
(02) stmts->stmt
(03) stmt->{ stmts }
(04) stmt->while M ( expr ) M stmt
(05) stmt->if ( expr ) M stmt
(06) stmt->if ( expr ) M stmt N else M stmt
(07) stmt->for ( id in num .. num N ) M stmt

(08) stmt->id = expr ;
{   gen(top.get(id.lexeme) '=' expr.addr);
    top.get(id.lexeme).setNs(0));
}

(09) stmt->L = expr ;
{ gen(L.array.base '[' L.addr ']' '=' expr.addr); }

(10) stmt->variable -= expr ;
{ gen(variable.addr '-=' expr.addr);
  top.putNS(variable.lexeme);
}

(11) stmt->variable += expr ;
{ gen(variable.addr '+=' expr.addr);
  top.putNS(variable.lexeme);
}

(12) stmt->variable *= expr ;
{ gen(variable.addr '*=' expr.addr);
  top.putNS(variable.lexeme);
}

(13) stmt->variable /= expr ;
{ gen(variable.addr '/=' expr.addr);
  top.putNS(variable.lexeme); }

(14) variable_declaration -> type null_sign variables ; variable_declaration
(15) variable_declaration -> epsilon
(16) type -> int
(17) type -> float
(18) null_sign -> ?
{ ns = 1; }

(19) null_sign -> epsilon
{ ns = 0; }

(20) variables -> variable , variables
(21) variables -> variable
(22) variable -> id array
(23) array -> [ num ] array
(24) array -> epsilon

(25) expr->expr + expr
{ if(expr1.type == int and expr2 == int)
    expr.type == int;
  else
    expr.type == float;
  expr.addr = new Temp();
  gen(expr.addr '=' expr1.addr '+' expr2.addr);
}

(26) expr->expr - expr
{ if(expr1.type == int and expr2 == int)
    expr.type == int;
  else
    expr.type == float;
  expr.addr = new Temp();
  gen(expr.addr '=' expr1.addr '-' expr2.addr);
}

(27) expr->expr * expr
{ expr.addr = new Temp();
  gen(expr.addr '=' expr1.addr '*' expr2.addr);
}

(28) expr->expr / expr
{ if(expr1.type == int and expr2 == int)
    expr.type == int;
  else
    expr.type == float;
  expr.addr = new Temp();
  gen(expr.addr '=' expr1.addr '/' expr2.addr);
}

(29) expr->expr ^ factor
{ if(expr1.type == int)
    expr.type == int;
  else
    expr.type == float;
  expr.addr = new Temp();
  gen(expr.addr '=' expr1.addr '^' factor.addr);
}

(30) expr->factor
{ expr.addr = factor.addr; }//相当于ppt 6b 中的E->id

(31) expr->expr1 < expr2
{ expr.truelist = makelist(nextinstr);
  expr.falselist = makelist(nextinstr + 1);
  gen('if' expr1.addr '<' expr2.addr 'goto _');
  gen('goto _'); }

(32) expr->expr > expr
{ expr.truelist = makelist(nextinstr);
  expr.falselist = makelist(nextinstr + 1);
  gen('if' expr1.addr '>' expr2.addr 'goto _');
  gen('goto _'); }

(33) expr->expr != expr
{ expr.truelist = makelist(nextinstr);
  expr.falselist = makelist(nextinstr + 1);
  gen('if' expr1.addr '!=' expr2.addr 'goto _');
  gen('goto _'); }

(34) expr->expr == expr
{ expr.truelist = makelist(nextinstr);
  expr.falselist = makelist(nextinstr + 1);
  gen('if' expr1.addr '==' expr2.addr 'goto _');
  gen('goto _'); }

(35) expr->expr <= expr
{ expr.truelist = makelist(nextinstr);
  expr.falselist = makelist(nextinstr + 1);
  gen('if' expr1.addr '<=' expr2.addr 'goto _');
  gen('goto _'); }

(36) expr->expr >= expr
{ expr.truelist = makelist(nextinstr);
  expr.falselist = makelist(nextinstr + 1);
  gen('if' expr1.addr '>=' expr2.addr 'goto _');
  gen('goto _'); }

(37) expr->expr1 && M expr2
{ backpatch(expr1.truelist,M.instr);
  expr.truelist = expr2.truelist;
  expr.falselist = merge(expr1.falselist,expr2.falselist); }

(38) expr->expr1 || M expr2
{ backpatch(expr1.falselist,M.instr);
  expr.falselist = expr2.falselist;
  expr.truelist = merge(expr1.truelist,expr2.truelist); }

(39) factor -> L
{ factor.addr = new Temp();
  gen(factor.addr '=' L.array.base '[' L.addr ']');
}

(40) factor->id
{ info = top.get(id.lexeme);
  if(info.ns == 1) { print('Error'); top.get(id.lexeme).setNs(0)); }
}

(41) factor->num
{ factor.addr = top.get(num.lexeme); }

(42) factor->real
{ factor.addr = top.get(real.lexeme); }

(43) factor->( expr )
{ factor.addr = expr.addr; }

(44) M -> epsilon
{ M.instr = nextinstr; }

(45) N -> epsilon
{ N.nextlist = makelist(nextinstr);
  gen('goto _'); }

(46) L -> id [ expr ]
{ L.array = top.get(id.lexeme);
  L.type = L.array.type.elem;
  L.addr = new Temp();
  gen(L.addr '=' expr.addr '*' L.type.width);
}

(47) L -> L [ expr ]
{ L.array = L1.array;
  L.type = L1.type.elem;
  t = new Temp();
  L.addr = new Temp;
  gen(t '=' expr.addr '*' L.type.width);
  gen(L.addr '=' L1.addr '+' t);
}