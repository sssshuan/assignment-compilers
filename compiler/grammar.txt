S -> program id stmts
stmts -> { stmt M }
stmt -> stmts
stmt -> stmt M stmts
stmts -> id = expr ;
stmts -> id := expr ;
stmts -> L = expr ;
stmts -> id += expr ;
stmts -> id -= expr ;
stmts -> id *= expr ;
stmts -> id /= expr ;
stmts -> if ( bool ) M stmts N else M stmts
stmts -> if ( bool ) M stmts
stmts -> while M ( bool ) M stmts
bool -> bool && M bool
bool -> bool || M bool
bool -> ! bool
bool -> expr != expr
bool -> expr == expr
bool -> expr < expr
bool -> expr <= expr
bool -> expr > expr
bool -> expr >= expr
expr -> expr + expr
expr -> expr - expr
expr -> expr * expr
expr -> expr / expr
expr -> expr ^ factor
expr -> factor
factor -> id
factor -> num
factor -> ( expr )
M -> epsilon
N -> epsilon
expr -> L
L -> id [ expr ]
L -> L [ expr ]