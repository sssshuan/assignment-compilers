S->program id { variable_declaration stmts }
stmts->stmts M stmt
stmts->stmt
stmt->{ stmts }
stmt->while M ( expr ) M stmt
stmt->if ( expr ) M stmt
stmt->if ( expr ) M stmt N else M stmt
stmt->for ( id in num .. num N ) M stmt
stmt->id = expr ;
stmt->L = expr ;
stmt->id -= expr ;
stmt->id += expr ;
stmt->id *= expr ;
stmt->id /= expr ;
variable_declaration -> type null_sign variables ; variable_declaration
variable_declaration -> epsilon
type -> int
type -> float
null_sign -> ?
null_sign -> epsilon
variables -> variable , variables
variables -> variable
variable -> id array
array -> [ num ] array
array -> epsilon
expr->expr + expr
expr->expr - expr
expr->expr * expr
expr->expr / expr
expr->expr ^ factor
expr->factor
expr->expr < expr
expr->expr > expr
expr->expr != expr
expr->expr == expr
expr->expr <= expr
expr->expr >= expr
expr->expr && M expr
expr->expr || M expr
factor -> L
factor->id
factor->num
factor->real
factor->( expr )
M -> epsilon
N -> epsilon
L -> id [ expr ]
L -> L [ expr ]